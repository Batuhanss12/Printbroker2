import axios from 'axios';
import FormData from 'form-data';

interface IdeogramRequest {
  image_request: {
    prompt: string;
    aspect_ratio?: string;
    model?: string;
    magic_prompt_option?: string;
    seed?: number;
    style_type?: string;
    negative_prompt?: string;
  };
}

interface IdeogramResponse {
  created: string;
  data: Array<{
    url: string;
    is_image_safe: boolean;
    prompt: string;
    resolution: string;
    seed: number;
  }>;
}

class IdeogramService {
  private apiKey: string;
  private baseUrl = 'https://api.ideogram.ai/generate';

  constructor() {
    this.apiKey = 'X3h2wLDuOfuJynGGclLZhLN1isGvy9oxBM-S8wcNJVTqk80lyW6pszMShoMHP8YbN7DYSfzti7eTLL-KCExqZw';
    if (!this.apiKey) {
      console.warn('IDEOGRAM_API_KEY environment variable not set - design generation will be disabled');
    }
  }

  async generateImage(prompt: string, options: {
    aspectRatio?: 'ASPECT_1_1' | 'ASPECT_10_16' | 'ASPECT_16_10' | 'ASPECT_9_16' | 'ASPECT_16_9' | 'ASPECT_3_2' | 'ASPECT_2_3';
    model?: 'V_1' | 'V_1_TURBO' | 'V_2' | 'V_2_TURBO';
    styleType?: 'AUTO' | 'GENERAL' | 'REALISTIC' | 'DESIGN' | 'RENDER_3D' | 'ANIME';
    magicPrompt?: 'AUTO' | 'ON' | 'OFF';
    negativePrompt?: string;
    seed?: number;
  } = {}): Promise<IdeogramResponse> {
    if (!this.apiKey) {
      throw new Error('Ideogram API key not configured. Please contact administrator.');
    }
    try {
      // Etiket tasarƒ±mlarƒ± i√ßin √∂zel prompt optimizasyonu
      const enhancedPrompt = this.enhancePromptForLabels(prompt);
      const enhancedOptions = this.optimizeOptionsForLabels(prompt, options);

      console.log('üéØ API ƒ∞steƒüi G√∂nderiliyor:', {
        originalPrompt: prompt,
        enhancedPrompt,
        options: enhancedOptions
      });

      const requestData: IdeogramRequest = {
        image_request: {
          prompt: enhancedPrompt,
          aspect_ratio: enhancedOptions.aspectRatio || 'ASPECT_1_1',
          model: enhancedOptions.model || 'V_2',
          style_type: enhancedOptions.styleType || 'DESIGN',
          magic_prompt_option: enhancedOptions.magicPrompt || 'AUTO',
          negative_prompt: enhancedOptions.negativePrompt,
          seed: enhancedOptions.seed,
        }
      };

      const response = await axios.post<IdeogramResponse>(
        this.baseUrl,
        requestData,
        {
          headers: {
            'Api-Key': this.apiKey,
            'Content-Type': 'application/json',
          },
          timeout: 60000, // 60 seconds timeout
        }
      );

      console.log('üìä API Yanƒ±tƒ±:', {
        status: response.status,
        dataCount: response.data.data?.length || 0,
        created: response.data.created
      });

      // Geli≈ümi≈ü hata kontrol√º
      this.validateApiResponse(response.data);

      // Kalite kontrol√º uygula
      const validatedResult = this.validateDesignResult(response.data, prompt);
      return validatedResult;
    } catch (error) {
      console.error('‚ùå Ideogram API Hatasƒ±:', {
        error: error instanceof Error ? error.message : error,
        prompt,
        options,
        axiosError: axios.isAxiosError(error) ? {
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data
        } : null
      });
      
      if (axios.isAxiosError(error) && error.response) {
        throw new Error(`Ideogram API Error (${error.response.status}): ${error.response.statusText}`);
      }
      
      throw new Error('Failed to generate image with Ideogram API');
    }
  }

  async generateMultipleImages(prompts: string[], options: Parameters<typeof this.generateImage>[1] = {}): Promise<IdeogramResponse[]> {
    const promises = prompts.map(prompt => this.generateImage(prompt, options));
    return Promise.all(promises);
  }

  // Batch generation with rate limiting
  async generateBatch(requests: Array<{ prompt: string; options?: Parameters<typeof this.generateImage>[1] }>, batchSize = 3): Promise<IdeogramResponse[]> {
    if (!this.apiKey) {
      throw new Error('Ideogram API key not configured. Please contact administrator.');
    }

    const results: IdeogramResponse[] = [];

    for (let i = 0; i < requests.length; i += batchSize) {
      const batch = requests.slice(i, i + batchSize);
      const batchPromises = batch.map(req => this.generateImage(req.prompt, req.options));
      const batchResults = await Promise.all(batchPromises);
      results.push(...batchResults);

      // Rate limiting delay between batches
      if (i + batchSize < requests.length) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    return results;
  }

  // Etiket tasarƒ±mlarƒ± i√ßin prompt geli≈ütirme
  private enhancePromptForLabels(originalPrompt: string): string {
    const isLabelDesign = this.isLabelDesign(originalPrompt);
    
    if (isLabelDesign) {
      // G√º√ßl√º anti-mockup etiket promptu
      const antiMockupKeywords = [
        'FLAT LABEL DESIGN ONLY', 'NO MOCKUP', 'NO BOTTLE', 'NO PACKAGING',
        '2D GRAPHIC DESIGN', 'LABEL ARTWORK', 'STICKER DESIGN', 'DECAL DESIGN'
      ].join(', ');

      const designSpecs = [
        'professional typography', 'clean layout', 'brand identity', 
        'commercial printing quality', 'vector style graphics',
        'high contrast text', 'balanced composition', 'modern aesthetic'
      ].join(', ');

      const labelPrompt = `IMPORTANT: ${antiMockupKeywords}. Create a flat, 2D label design for: ${originalPrompt}. Requirements: ${designSpecs}. Style: minimalist, professional, print-ready. Format: flat graphic design suitable for label printing. ABSOLUTELY NO: 3D mockups, product bottles, packaging visualization, realistic rendering, shadows, perspective views, product photography.`;
      
      console.log('üö´ G√ú√áL√ú ANTƒ∞-MOCKUP PROMPT:', {
        originalLength: originalPrompt.length,
        enhancedLength: labelPrompt.length,
        prompt: labelPrompt
      });
      
      return labelPrompt;
    }
    
    // Normal tasarƒ±mlar i√ßin de kalite artƒ±rƒ±mƒ±
    const enhancedPrompt = `High quality, professional design: ${originalPrompt}. Clean composition, sharp details, modern aesthetic, commercial grade quality.`;
    
    console.log('üìù Geli≈ütirilmi≈ü normal prompt:', enhancedPrompt);
    return enhancedPrompt;
  }

  // Etiket tasarƒ±mlarƒ± i√ßin se√ßenek optimizasyonu
  private optimizeOptionsForLabels(originalPrompt: string, options: any): any {
    const isLabelDesign = this.isLabelDesign(originalPrompt);
    
    if (isLabelDesign) {
      // √áok g√º√ßl√º negative prompt
      const extremeAntiMockupPrompt = [
        'mockup', 'mock-up', 'mock up', '3d mockup', 'product mockup',
        'bottle mockup', 'packaging mockup', 'container mockup',
        '3d rendering', '3d render', 'realistic rendering', 'photorealistic',
        'bottle', 'bottles', 'product bottle', 'glass bottle', 'plastic bottle',
        'package', 'packaging', 'product packaging', 'box packaging',
        'container', 'product container', 'jar', 'tube', 'can',
        'product photography', 'product shot', 'studio photography',
        'shadows', 'drop shadows', 'cast shadows', 'lighting effects',
        'perspective view', 'perspective', '3d perspective', 'depth of field',
        'physical object', 'real product', 'actual product',
        'studio lighting', 'professional lighting', 'rim lighting',
        'reflection', 'surface reflection', 'glossy surface',
        'background', 'realistic background', 'studio background',
        'blur', 'blurry', 'out of focus', 'depth blur',
        'low quality', 'pixelated', 'compressed', 'artifacts',
        'watermark', 'logo overlay', 'brand overlay'
      ].join(', ');

      const optimizedOptions = {
        ...options,
        styleType: 'DESIGN', // Grafik tasarƒ±m stili zorunlu
        model: 'V_2',
        aspectRatio: options.aspectRatio || 'ASPECT_1_1',
        magicPrompt: 'OFF', // Magic prompt kapatƒ±yoruz √ß√ºnk√º kendi promptumuz √ßok spesifik
        negativePrompt: extremeAntiMockupPrompt // √ñnceki negative prompt'u eziyoruz
      };

      console.log('üõ°Ô∏è EKSTREME ANTƒ∞-MOCKUP OPTƒ∞Mƒ∞ZASYONU:', {
        styleType: optimizedOptions.styleType,
        model: optimizedOptions.model,
        aspectRatio: optimizedOptions.aspectRatio,
        magicPrompt: optimizedOptions.magicPrompt,
        negativePromptLength: optimizedOptions.negativePrompt.length,
        negativePromptWords: optimizedOptions.negativePrompt.split(', ').length
      });

      return optimizedOptions;
    }
    
    // Normal tasarƒ±mlar i√ßin de kalite optimizasyonu
    return {
      ...options,
      model: options.model || 'V_2',
      styleType: options.styleType || 'DESIGN',
      magicPrompt: options.magicPrompt || 'AUTO',
      negativePrompt: options.negativePrompt ? 
        `${options.negativePrompt}, low quality, blurry, pixelated` : 
        'low quality, blurry, pixelated'
    };
  }

  // Etiket tasarƒ±mƒ± algƒ±lama
  private isLabelDesign(prompt: string): boolean {
    const labelKeywords = [
      'etiket', 'label', 'etiketi', 'labelƒ±', '√ºr√ºn etiketi', 'product label',
      'marka etiketi', 'brand label', 'kozmetik etiketi', 'cosmetic label',
      'gƒ±da etiketi', 'food label', 'i√ßecek etiketi', 'beverage label',
      '≈üampuan etiketi', 'parf√ºm etiketi', 'deterjan etiketi',
      'etiket tasarƒ±m', 'label design', 'etiket tasarla', 'sticker'
    ];
    
    const lowerPrompt = prompt.toLowerCase();
    const isLabel = labelKeywords.some(keyword => lowerPrompt.includes(keyword.toLowerCase()));
    
    console.log('üîç Etiket algƒ±lama:', { 
      prompt: lowerPrompt, 
      isLabel,
      matchedKeywords: labelKeywords.filter(keyword => lowerPrompt.includes(keyword.toLowerCase()))
    });
    
    return isLabel;
  }

  // API yanƒ±t doƒürulama
  private validateApiResponse(response: IdeogramResponse): void {
    if (!response.data || response.data.length === 0) {
      throw new Error('API bo≈ü yanƒ±t d√∂nd√º - hi√ß g√∂rsel olu≈üturulmadƒ±');
    }

    // G√ºvenlik kontrol√º
    const unsafeImages = response.data.filter(img => !img.is_image_safe);
    if (unsafeImages.length > 0) {
      console.warn('‚ö†Ô∏è G√ºvenli olmayan g√∂rsel tespit edildi:', unsafeImages.length);
    }

    // URL kontrol√º
    const invalidUrls = response.data.filter(img => !img.url || !img.url.startsWith('http'));
    if (invalidUrls.length > 0) {
      throw new Error('Ge√ßersiz g√∂rsel URL\'leri tespit edildi');
    }

    console.log('‚úÖ API yanƒ±tƒ± doƒürulandƒ±:', {
      totalImages: response.data.length,
      safeImages: response.data.filter(img => img.is_image_safe).length,
      validUrls: response.data.filter(img => img.url && img.url.startsWith('http')).length
    });
  }

  // Tasarƒ±m sonucu kalite kontrol√º ve mockup tespiti
  private validateDesignResult(response: IdeogramResponse, originalPrompt: string): IdeogramResponse {
    const isLabelDesign = this.isLabelDesign(originalPrompt);
    
    if (isLabelDesign && response.data && response.data.length > 0) {
      // Mockup tespit etme - sadece g√∂rsel URL'sinde ger√ßek mockup ipu√ßlarƒ± ara
      const potentialMockups = response.data.filter(img => {
        // Sadece URL'de ger√ßek mockup belirtileri ara, prompt'ta deƒüil
        const imgUrl = img.url?.toLowerCase() || '';
        const suspiciousUrlPatterns = [
          'mockup', 'mock-up', 'product-shot', 'bottle-render', '3d-render'
        ];
        
        const hasSuspiciousUrl = suspiciousUrlPatterns.some(pattern => 
          imgUrl.includes(pattern)
        );
        
        // √áok d√º≈ü√ºk √ß√∂z√ºn√ºrl√ºk kontrol√º (256x256'dan k√º√ß√ºk)
        const isLowQuality = img.resolution && (
          img.resolution.includes('256x256') || 
          img.resolution.includes('128x128')
        );
        
        return hasSuspiciousUrl || isLowQuality;
      });

      if (potentialMockups.length > 0) {
        console.warn('üö® D√ú≈û√úK KALƒ∞TE G√ñRSEL TESPƒ∞T EDƒ∞LDƒ∞:', {
          lowQualityCount: potentialMockups.length,
          totalImages: response.data.length,
          filteredResolutions: potentialMockups.map(img => img.resolution)
        });
        
        // Sadece ger√ßekten d√º≈ü√ºk kaliteli olanlarƒ± filtrele
        response.data = response.data.filter(img => !potentialMockups.includes(img));
        
        console.log('üîÑ D√º≈ü√ºk kalite g√∂rseller filtrelendi, kalan g√∂rsel sayƒ±sƒ±:', response.data.length);
      }

      // Etiket tasarƒ±mlarƒ± i√ßin ek validasyon
      console.log('‚úÖ Etiket tasarƒ±mƒ± validasyonu:', {
        originalImageCount: response.data.length + potentialMockups.length,
        filteredImageCount: response.data.length,
        removedLowQuality: potentialMockups.length,
        allSafe: response.data.every(img => img.is_image_safe),
        originalPrompt,
        resolutions: response.data.map(img => img.resolution),
        seeds: response.data.map(img => img.seed)
      });

      // Sadece √ßok kritik durumlarda hata at - normal durumda g√∂rselleri d√∂nd√ºr
      if (response.data.length === 0 && potentialMockups.length > 0) {
        console.warn('‚ö†Ô∏è T√ºm g√∂rseller d√º≈ü√ºk kalite olarak filtrelendi, yine de d√∂nd√ºr√ºl√ºyor');
        response.data = potentialMockups.slice(0, 1); // En azƒ±ndan bir g√∂rsel d√∂nd√ºr
      }
    }
    
    return response;
  }
}

export const ideogramService = new IdeogramService();
export type { IdeogramRequest, IdeogramResponse };